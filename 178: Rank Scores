178: Rank Scores

https://leetcode.com/problems/rank-scores/

Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no "holes" between ranks.

+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+

For example, given the above Scores table, your query should generate the following report (order by highest score):

+-------+------+
| Score | Rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+

Solution 1: (won't work in MYSQL, but can use variables to mimic --> https://www.folkstalk.com/2013/03/grouped-dense-rank-function-mysql-sql-query.html)


SELECT
    Score, DENSE_RANK() OVER (ORDER BY Score DESC) Rank
FROM
    Scores;


* note:

RANK gives you the ranking within your ordered partition. Ties are assigned the same rank, with the next ranking(s) skipped. So, if you have 3 items at rank 2, the next rank listed would be ranked 5.
DENSE_RANK again gives you the ranking within your ordered partition, but the ranks are consecutive. No ranks are skipped if there are ranks with multiple items.


Solution 2:

select a.score Score, (select count(distinct b.score)+1 
from scores b where a.score < b.score) Rank 
from scores a order by a.score desc;


Solution 3: USING VARIABLES

SELECT
  Score,
  @rank := @rank + (@prev <> (@prev := Score)) Rank
FROM
  Scores,
  (SELECT @rank := 0, @prev := -1) init
ORDER BY Score DESC;



SELECT 
    Score, 
    @rank := @rank + 
    CASE WHEN
        @score <> (@score := Score) 
    THEN 1 ELSE 0 
    END as Rank
FROM Scores, (SELECT @score := -1, @rank := 0) init
ORDER BY Score DESC;
